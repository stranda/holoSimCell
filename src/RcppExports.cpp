// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// oneMultinomCall
IntegerVector oneMultinomCall(NumericVector probs);
RcppExport SEXP _holoSimCell_oneMultinomCall(SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(oneMultinomCall(probs));
    return rcpp_result_gen;
END_RCPP
}
// whichMultinom
int whichMultinom(NumericVector probs);
RcppExport SEXP _holoSimCell_whichMultinom(SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(whichMultinom(probs));
    return rcpp_result_gen;
END_RCPP
}
// submat
NumericMatrix submat(NumericMatrix X, LogicalVector condition);
RcppExport SEXP _holoSimCell_submat(SEXP XSEXP, SEXP conditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type condition(conditionSEXP);
    rcpp_result_gen = Rcpp::wrap(submat(X, condition));
    return rcpp_result_gen;
END_RCPP
}
// getsrcC
IntegerVector getsrcC(NumericMatrix tmat, NumericVector nv);
RcppExport SEXP _holoSimCell_getsrcC(SEXP tmatSEXP, SEXP nvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tmat(tmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nv(nvSEXP);
    rcpp_result_gen = Rcpp::wrap(getsrcC(tmat, nv));
    return rcpp_result_gen;
END_RCPP
}
// getsrcC2
IntegerVector getsrcC2(NumericMatrix tmat, NumericVector nv);
RcppExport SEXP _holoSimCell_getsrcC2(SEXP tmatSEXP, SEXP nvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type tmat(tmatSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nv(nvSEXP);
    rcpp_result_gen = Rcpp::wrap(getsrcC2(tmat, nv));
    return rcpp_result_gen;
END_RCPP
}
// makeRmatC
NumericMatrix makeRmatC(NumericMatrix pops, NumericMatrix dm, NumericVector cent);
RcppExport SEXP _holoSimCell_makeRmatC(SEXP popsSEXP, SEXP dmSEXP, SEXP centSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pops(popsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dm(dmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cent(centSEXP);
    rcpp_result_gen = Rcpp::wrap(makeRmatC(pops, dm, cent));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_holoSimCell_oneMultinomCall", (DL_FUNC) &_holoSimCell_oneMultinomCall, 1},
    {"_holoSimCell_whichMultinom", (DL_FUNC) &_holoSimCell_whichMultinom, 1},
    {"_holoSimCell_submat", (DL_FUNC) &_holoSimCell_submat, 2},
    {"_holoSimCell_getsrcC", (DL_FUNC) &_holoSimCell_getsrcC, 2},
    {"_holoSimCell_getsrcC2", (DL_FUNC) &_holoSimCell_getsrcC2, 2},
    {"_holoSimCell_makeRmatC", (DL_FUNC) &_holoSimCell_makeRmatC, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_holoSimCell(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
