migration <- fscSettingsMigration(migmat)
## Historical events
## Event times (coalescence and bottlenecks)
T.LA = round(runif(1,1000,5000))
T.UNK = round(runif(1,50, T.LA))  #Time of coalescence to LA pop
T.FC1 = round(runif(1,10, T.UNK)) #Time of coalescence for Fox Creek group 1 to UNK
T.FC2 = round(runif(1,10, T.FC1))   #Time of coalescence for Fox Creek group 2, constrained by R.FC1
T.SHD = round(runif(1,10, T.FC1))   #Time of coalescence for Sheraton (+TB+HO) group
T.FAR = round(runif(1,10, T.FC1)) #Time of coalescence for Farmington Rd (+PR) group
T.MB = round(runif(1,5, T.SHD)) #Time of coalescence for Meadowbrook (+AUB) group, constrained by T.SHD
T.ROW = round(runif(1,10, T.FC1)) #Time of coalescence for River Oaks (+SC+BB) group
T.ST = round(runif(1,5, T.ROW)) #Time of coalescence for Newland Drain group, constrained by T.ROW
T.UNK_1 = T.UNK-1 #Time of bottleneck for UNK
T.FC1_1 = T.FC1-1 #Time of bottleneck for Fox Creek group 1
T.FC2_1 = T.FC2-1 #Time of bottleneck for FC2 into FC1
T.SHD_1 = T.SHD-1 #Time of bottleneck for SHD into FC1
T.FAR_1 = T.FAR-1 #Time of bottleneck for FAR into FC1
T.MB_1 = T.MB-1 #Time of bottleneck for MB1 into SHD
T.ROW_1 = T.ROW-1 #Time of bottleneck for ROW into UNK
T.ST_1 = T.ST-1 #Time of bottleneck for ST into ROW
bott.sev <- round(runif(1,0,0.25), 3)
# build dataframe for historical event info
time.names <- c("T.UNK", "T.FC1", "T.FC2", "T.SHD", "T.FAR", "T.MB", "T.ROW", "T.ST", "T.UNK_1", "T.FC1_1", "T.FC2_1", "T.SHD_1", "T.FAR_1", "T.MB_1", "T.ROW_1", "T.ST_1")
E.times <-  c(T.UNK, T.FC1, T.FC2, T.SHD, T.FAR, T.MB, T.ROW, T.ST, T.UNK_1, T.FC1_1, T.FC2_1, T.SHD_1, T.FAR_1, T.MB_1, T.ROW_1, T.ST_1)
source <- c(1,2,3,4,6,5,7,8,1,2,3,4,6,5,7,8)
sink <- c(0,1,2,2,2,4,1,7,1,2,3,4,6,5,7,8)
prop.migrants <- c(rep(1,8), rep(0,8))
new.size <- c(rep(1,8), rep(bott.sev,8))
event.df <- as.data.frame(cbind(time.names, E.times, source, sink, prop.migrants, new.size, new.growth=rep(0,16), migr.mat=rep(0,16)))
event.df[,2:(length(event.df))] <- sapply(event.df[,2:(length(event.df))], as.numeric)
# build list for historical event info
eventlist <- list()
for(ev in 1:nrow(event.df)) {#
    eventlist[[ev]] <- fscEvent(event.time = event.df$E.times[ev], source = event.df$source[ev], sink = event.df$sink[ev], prop.migrants = event.df$prop.migrants[ev], new.size = event.df$new.size[ev], new.growth = event.df$new.growth[ev], migr.mat = event.df$migr.mat[ev])#
  }
# create events obj for fsc
events <- do.call(fscSettingsEvents, eventlist)
# Add event times to kill ea deme (needed for fsc27)
kill.df <- events[events$source == events$sink,]
kill.df$event.time <- kill.df$event.time+1
kill.df$new.size <- 0
events <- rbind(events, kill.df)
# order events newest to oldest
events <- events[order(events$event.time),]
#setwd("~/RSC/ABC")
#Define functions needed below
source("~/Desktop/GitHub/holoSimCell/R/helper-functions.R")
source("~/Desktop/GitHub/holoSimCell/R/additional_stats_functions.R")
MAF= 0.05  #MAF - minor allele frequency filter... loci with minor allele frequencies below this value are excluded from output
nloci = 900
maxloc = 200000       #max number of marker loci to attempt in fastsimcoal
varSNPs <- 0
while(varSNPs < nloci) {#
 # p <- fscWrite(demes = demes, genetics = genetics, events = events, migration = migration, label = paste0(label, "-", nreps), use.wd = TRUE)#
  p <- fscWrite(demes = demes, genetics = genetics, events = events, migration = migration, label = paste0(label, "-", node), use.wd = TRUE)#
  p <- fscRun(p, all.sites = FALSE, inf.sites = FALSE, dna.to.snp = TRUE, quiet = FALSE, num.cores = num_cores, exec = exec)#
  out <- fscReadArp(p)#
    print(date())#
    #print(paste("cleaning up fsc files:",label, "-", nreps))#
    #fscCleanup(paste0(label, "-", nreps))#
    print(paste("cleaning up fsc files:",label, "-", node))#
    fscCleanup(paste0(label, "-", node))#
  message(paste("Coalescent simulation with",attr(genetics,"num.chrom"), "loci resulted in", (ncol(out)-2)/2, "polymorphic sites"), appendLF=TRUE)#
  fscout <- sampleOnePerLocus(mat = out, MAF = MAF)#
  tmp_gtype <- df2gtypes(fscout, ploidy = 2)#
  varSNPs <- sum(numAlleles(tmp_gtype)$num.alleles == 2)#
  message(paste("Subsampling to one SNP per locus...", varSNPs, "loci have at least one polymorphic sites with MAF >", MAF), appendLF=TRUE)#
  if(varSNPs < nloci) {#
    if(attr(genetics, "num.chrom") == maxloc) {#
      stop("Too few SNPs pass the MAF!  Redrawing parameter values for this replicate!  Setting maxSNPstried to a larger value will lead to longer simulations")#
    }#
    scaleSNP <- 1.1*(attr(genetics, "num.chrom")/varSNPs)#
    newSNPnum <- round(scaleSNP*attr(genetics, "num.chrom"),0)#
    if(newSNPnum > maxloc) {#
      newSNPnum <- maxloc#
      message(paste("Coalescent simulation with", attr(genetics, "num.chrom"), "loci resulted in", varSNPs, "variable markers. Trying again with the maximum number of loci allowable -",newSNPnum, "!"), appendLF=TRUE)#
    } else {#
      message(paste("Coalescent simulation with", attr(genetics, "num.chrom"), "loci resulted in", varSNPs, "variable markers. Trying again with",newSNPnum, "loci!"), appendLF=TRUE)#
    }#
    attr(genetics, "num.chrom") <- newSNPnum#
    rm(scaleSNP, newSNPnum)#
  } else if(varSNPs > nloci) {#
    nalleles <- numAlleles(tmp_gtype)#
    varchromnames <-  nalleles$locus[nalleles$num.alleles == 2]#
    keep.loci <- sample(varchromnames, nloci, replace = FALSE)#
    keep.columns <- c(1,2)#
    for(locus in keep.loci) {#
      keep.columns <- c(keep.columns, grep(locus, colnames(fscout)))#
    }#
    fscout <- fscout[,keep.columns]#
  }#
}
params <- data.frame(Model= label, date = date(), node=node, runBy=runBy,#
                     GenTime=G, mu=format(mu, scientific = T), MAF=MAF, seqLength=seq_length,#
                     N.LA=N.LA, N.UNK=N.UNK, N.FC1=N.FC1, N.FC2=N.FC2, N.SHD=N.SHD, N.MB=N.MB, N.FAR=N.FAR, N.ROW=N.ROW, N.ST=N.ST,#
                     migNat=round(m.NA,4), migFC=round(m.FC, 4), migSHD=round(m.SHD,4), bottleneckSeverity=bott.sev,#
                     T.UNK=T.UNK, T.FC1=T.FC1, T.FC2=T.FC2, T.SHD=T.SHD, T.FAR=T.FAR, T.MB=T.MB, T.ROW=T.ROW, T.ST=T.ST, #
                     T.UNK_1=T.UNK_1, T.FC1_1=T.FC1_1, T.FC2_1=T.FC2_1, T.SHD_1=T.SHD_1, T.FAR_1=T.FAR_1, T.MB_1=T.MB_1, T.ROW_1=T.ROW_1, T.ST_1=T.ST_1)
# Calculate summary statistics from simulated SNP data
# from https://github.com/EricArcher/strataG/blob/master/vignettes/summaries.R
# also see functions from strataG: https://github.com/EricArcher/strataG/blob/master/vignettes/summaries.R
popid <- unique(fscout$deme)
# Statistics measuring levels of genetic diversity within populations:
allMAF <- mafreq(fscout)
totalHe <- 2*allMAF*(1-allMAF)
SNPs <- sum(allMAF<1)
names(SNPs) <- "tot_SNPs"
split_out <- vector("list", length(unique(fscout$deme)))
for(p in 1:length(unique(fscout$deme))) {#
  split_out[[p]] <- fscout[fscout$deme == unique(fscout$deme)[p],]#
  names(split_out)[p] <- unique(split_out[[p]]$deme)#
}
split_out
names(split_out)
popid
fscout$deme
demes
names(out)
colnames(out)
colnames(out)[1:10]
out$deme
minor <- sapply(names(allMAF), FUN=function(x){strsplit(x, split = "[.]")[[1]][2]})
locMAF <- loc.mafreq(split_out, minor)
DW <- colSums(locMAF/allMAF)
names(DW) <- paste0("DW_",names(DW))
locHe <- colMeans(2*locMAF*(1-locMAF))
varlocHe <- apply(2*locMAF*(1-locMAF),2,var)
locN <- sapply(split_out,function(o){nrow(o)})
localSNP <- apply(locMAF,2,function(x){sum(x<1 & x>0)})
names(localSNP) <- paste0("S.", names(localSNP))
richnessSNP <- allelicRichness(df2gtypes(fscout, ploidy = 2), by.strata=TRUE)
richnessSNP <- richnessSNP %>% group_by(stratum) %>% summarize(mean=mean(allelic.richness))
richnessSNP <- as.data.frame(t(richnessSNP))
names(richnessSNP) <- paste0("rS.", richnessSNP[1,])
richnessSNP <- richnessSNP[-1,]
privateSNP <- colSums(privateAlleles(df2gtypes(fscout, ploidy = 2)))
privateSNP <- privateSNP[match(unique(fscout$deme), names(privateSNP))]
names(privateSNP) <- paste0("pS.", names(privateSNP))
total_priv = sum(privateSNP)
names(total_priv) <- "tot_priv"
# Statistics measuring levels of genetic differentiation between populations:
cores=1
pwhet <- pwise.het(locMAF,locN,cores)
FstMat.loc <- as.dist(pwise.fst.loc(locMAF,allMAF,locN,pwhet))
neimat <- pwise.nei(locMAF,cores)
pairnei <- as.vector(neimat)
neinames <- c()
neimat_names <- attr(neimat, "Labels")
for(pid in 1:(length(neimat_names)-1)) {#
  neinames <- c(neinames, paste0("Nei_", neimat_names[pid],".", neimat_names[(pid+1):length(neimat_names)]))#
}
names(pairnei) = neinames
attr(FstMat.loc,"Labels") <- attr(neimat,"Labels")
FstMat_names <- attr(FstMat.loc,"Labels")
pairFst.loc = as.vector(FstMat.loc)
Fstnames.loc = c()
for(pid in 1:(length(FstMat_names)-1)) {#
  Fstnames.loc = c(Fstnames.loc, paste0("Fst_", FstMat_names[pid],".", FstMat_names[(pid+1):length(FstMat_names)]))#
}
names(pairFst.loc) = Fstnames.loc
# directionality index
psi<- psiCalc(locMAF, samplen=nsamples)
# Pairwise private SNPs and their frequencies
# from https://github.com/nicksard/2019_Goby_ABC_scripts/blob/master/fast_stats_v2.R
locMAF
head(locMAF)
neinames
pops <- colnames(locMAF)
combn(pops)
combn(pops,2)
locMAF[1:10,1:10]
locMAF[1:10,1:5]
tmp_locMAF <- loc_MAF[,c(1,2)]
tmp_locMAF <- locMAF[,c(1,2)]
tmp_locMAF[1:10,]
sum(tmp_locMAF[,1] > 0 & tmp_locMAF[,2] == 0)
locMAF
pops <- colnames(locMAF)
combos <- combn(pops,2)
pwpriv_names <- c()
pwpriv <- c()
for(pair in 1:length(combos[1,])) {#
    pwpriv_names <- c(pwpriv_names, paste("pwpriv_",combos[1,pair], combos[2,pair], collapse = "."), paste("pwpriv_", combos[2,pair], combos[1,pair]))#
    tmp_locMAF <- locMAF[,c(combos[,pair[1,]], combos[,pair[2,]])]#
    tmp_locMAF <- tmp_locMAF[rowSums(tmp_locMAF > 0),]#
    #Sites that are polymorphic in pop 1, but not 2#
    pwpriv <- c(pwpriv, sum(tmp_locMAF[,1] > 0 & tmp_locMAF[,2] == 0))#
    #Sites that are polymorphic in pop 2, but not 1#
    pwpriv <- c(pwpriv, sum(tmp_locMAF[,2] > 0 & tmp_locMAF[,1] == 0))#
#
    rm(tmp_locMAF)#
}
combos[1,pair]
locMAF
pops <- colnames(locMAF)
combos <- combn(pops,2)
pwpriv_names <- c()
pwpriv <- c()
for(pair in 1:length(combos[1,])) {#
    pwpriv_names <- c(pwpriv_names, paste("pwpriv_",combos[1,pair], combos[2,pair], collapse = "."), paste("pwpriv_", combos[2,pair], combos[1,pair]))#
    tmp_locMAF <- locMAF[,c(combos[1,pair], combos[2,pair])]#
    tmp_locMAF <- tmp_locMAF[rowSums(tmp_locMAF > 0),]#
    #Sites that are polymorphic in pop 1, but not 2#
    pwpriv <- c(pwpriv, sum(tmp_locMAF[,1] > 0 & tmp_locMAF[,2] == 0))#
    #Sites that are polymorphic in pop 2, but not 1#
    pwpriv <- c(pwpriv, sum(tmp_locMAF[,2] > 0 & tmp_locMAF[,1] == 0))#
#
    rm(tmp_locMAF)#
}
pwpriv
locMAF
pops <- colnames(locMAF)
combos <- combn(pops,2)
pwpriv_names <- c()
pwpriv <- c()
pair <- 1
pwpriv_names <- c(pwpriv_names, paste("pwpriv_",combos[1,pair], combos[2,pair], collapse = "."), paste("pwpriv_", combos[2,pair], combos[1,pair]))
pwpriv_names
pwpriv_names <- c()
pwpriv <- c()
pwpriv_names <- c(pwpriv_names, paste0("pwpriv_",combos[1,pair],".",combos[2,pair]), paste0("pwpriv_", combos[2,pair],".",combos[1,pair]))
pwpriv_names
tmp_locMAF <- locMAF[,c(combos[1,pair], combos[2,pair])]
tmp_locMAF[1:10,]
tmp_locMAF <- tmp_locMAF[rowSums(tmp_locMAF > 0),]
tmp_locMAF[1:10,]
tmp_locMAF <- locMAF[,c(combos[1,pair], combos[2,pair])]
rowSums(tmp_locMAF)
sum(rowSums(tmp_locMAF) == 0)
dim(tmp_locMAF)
pwpriv_names <- c(pwpriv_names, paste0("pwpriv_",combos[1,pair],".",combos[2,pair]), paste0("pwpriv_", combos[2,pair],".",combos[1,pair]))
tmp_locMAF <- locMAF[,c(combos[1,pair], combos[2,pair])]
tmp_locMAF <- tmp_locMAF[rowSums(tmp_locMAF > 0),]
dim(tmp_locMAF)
pwpriv <- c(pwpriv, sum(tmp_locMAF[,1] > 0 & tmp_locMAF[,2] == 0))
pwpriv <- c(pwpriv, sum(tmp_locMAF[,2] > 0 & tmp_locMAF[,1] == 0))
pwpriv
tmp_locMAF[tmp_locMAF[,2] == 0,]
sum(locMAF == 1)
tmp_loc_MAF[,1] > 0
tmp_locMAF[,1] > 0
tmp_locMAF
N.LA
N.UNK
demes
parms
params
privateSNP
privateAlleles(df2gtypes(fscout, ploidy=2))
dim(privateAlleles(df2gtypes(fscout, ploidy=2)))
rowSums(locMAF) == 0
rowSums(locMAF == 0)
max(rowSums(locMAF == 0))
114+100+94+26+25+50
library(strataG)
fscRun
\\
readArp
fscReadArp
.fscFormatGenotypes
?demes
fscSettingsDemes
?fscSettingsDemes
?fscDeme
install.packages("Demerelate")
devtools::install_github("jehangiramjad/tslib")
Sys.unsetenv("GITHUB_PAT")
devtools::install_github("jehangiramjad/tslib")
devtools::install_github("thelinkan/tslib")
devtools::install_github("armstrtw/fts")
options(timeout=9999999)
devtools::install_github("armstrtw/fts")
1.09/0.62
0.62/1.09
1.09/0.59
50000*24
580036-1500
601431-1500
tmp <- read.table("AB1.thetas.idx.txt", header = TRUE)
10^-10.386044
exp(-10.386044)
head(tmp)
tmp <- read.table("AB1.thetas.idx.txt", header = TRUE)
names(tmp)
range(tmp$Pairwise)
length(which(tmp$Pairwise == "-Inf"))
tmp[which(tmp$Pairwise == "-Inf")[1],]
exp(-Inf)
10^-Inf
pwise <- 10^tmp$Pairwise
pwise[1:100]
mean(pwise)
pwise2 <- exp(tmp$Pairwise)
mean(pwise2)
range(pwise)
range(pwise2)
log(5.6)
log10(5.6)
-1500+622735
-1500+628742
50000*24
25000*24
20000*24
634-678
634-578
600/56
24*40000
-1500+654829
-1500+681720
-1500+684132
seq(16,100,16)
-1500+686171
-1500+700390
setwd("~/Desktop/GitHub/holoSimCell")
devtools::load_all()
653-578
712-653
400/60
?getpophist2.cells
?getpophist2.cells
?testPophist
?drawParms
?ashSetupLandscape
