# Statistics measuring levels of genetic diversity within populations:
allMAF <- mafreq(fscout)
totalHe <- 2*allMAF*(1-allMAF)
SNPs <- sum(allMAF<1)
names(SNPs) <- "tot_SNPs"
split_out <- vector("list", length(unique(fscout$deme)))
for(p in 1:length(unique(fscout$deme))) {#
  split_out[[p]] <- fscout[fscout$deme == unique(fscout$deme)[p],]#
  names(split_out)[p] <- unique(split_out[[p]]$deme)#
}
split_out
names(split_out)
popid
fscout$deme
demes
names(out)
colnames(out)
colnames(out)[1:10]
out$deme
minor <- sapply(names(allMAF), FUN=function(x){strsplit(x, split = "[.]")[[1]][2]})
locMAF <- loc.mafreq(split_out, minor)
DW <- colSums(locMAF/allMAF)
names(DW) <- paste0("DW_",names(DW))
locHe <- colMeans(2*locMAF*(1-locMAF))
varlocHe <- apply(2*locMAF*(1-locMAF),2,var)
locN <- sapply(split_out,function(o){nrow(o)})
localSNP <- apply(locMAF,2,function(x){sum(x<1 & x>0)})
names(localSNP) <- paste0("S.", names(localSNP))
richnessSNP <- allelicRichness(df2gtypes(fscout, ploidy = 2), by.strata=TRUE)
richnessSNP <- richnessSNP %>% group_by(stratum) %>% summarize(mean=mean(allelic.richness))
richnessSNP <- as.data.frame(t(richnessSNP))
names(richnessSNP) <- paste0("rS.", richnessSNP[1,])
richnessSNP <- richnessSNP[-1,]
privateSNP <- colSums(privateAlleles(df2gtypes(fscout, ploidy = 2)))
privateSNP <- privateSNP[match(unique(fscout$deme), names(privateSNP))]
names(privateSNP) <- paste0("pS.", names(privateSNP))
total_priv = sum(privateSNP)
names(total_priv) <- "tot_priv"
# Statistics measuring levels of genetic differentiation between populations:
cores=1
pwhet <- pwise.het(locMAF,locN,cores)
FstMat.loc <- as.dist(pwise.fst.loc(locMAF,allMAF,locN,pwhet))
neimat <- pwise.nei(locMAF,cores)
pairnei <- as.vector(neimat)
neinames <- c()
neimat_names <- attr(neimat, "Labels")
for(pid in 1:(length(neimat_names)-1)) {#
  neinames <- c(neinames, paste0("Nei_", neimat_names[pid],".", neimat_names[(pid+1):length(neimat_names)]))#
}
names(pairnei) = neinames
attr(FstMat.loc,"Labels") <- attr(neimat,"Labels")
FstMat_names <- attr(FstMat.loc,"Labels")
pairFst.loc = as.vector(FstMat.loc)
Fstnames.loc = c()
for(pid in 1:(length(FstMat_names)-1)) {#
  Fstnames.loc = c(Fstnames.loc, paste0("Fst_", FstMat_names[pid],".", FstMat_names[(pid+1):length(FstMat_names)]))#
}
names(pairFst.loc) = Fstnames.loc
# directionality index
psi<- psiCalc(locMAF, samplen=nsamples)
# Pairwise private SNPs and their frequencies
# from https://github.com/nicksard/2019_Goby_ABC_scripts/blob/master/fast_stats_v2.R
locMAF
head(locMAF)
neinames
pops <- colnames(locMAF)
combn(pops)
combn(pops,2)
locMAF[1:10,1:10]
locMAF[1:10,1:5]
tmp_locMAF <- loc_MAF[,c(1,2)]
tmp_locMAF <- locMAF[,c(1,2)]
tmp_locMAF[1:10,]
sum(tmp_locMAF[,1] > 0 & tmp_locMAF[,2] == 0)
locMAF
pops <- colnames(locMAF)
combos <- combn(pops,2)
pwpriv_names <- c()
pwpriv <- c()
for(pair in 1:length(combos[1,])) {#
    pwpriv_names <- c(pwpriv_names, paste("pwpriv_",combos[1,pair], combos[2,pair], collapse = "."), paste("pwpriv_", combos[2,pair], combos[1,pair]))#
    tmp_locMAF <- locMAF[,c(combos[,pair[1,]], combos[,pair[2,]])]#
    tmp_locMAF <- tmp_locMAF[rowSums(tmp_locMAF > 0),]#
    #Sites that are polymorphic in pop 1, but not 2#
    pwpriv <- c(pwpriv, sum(tmp_locMAF[,1] > 0 & tmp_locMAF[,2] == 0))#
    #Sites that are polymorphic in pop 2, but not 1#
    pwpriv <- c(pwpriv, sum(tmp_locMAF[,2] > 0 & tmp_locMAF[,1] == 0))#
#
    rm(tmp_locMAF)#
}
combos[1,pair]
locMAF
pops <- colnames(locMAF)
combos <- combn(pops,2)
pwpriv_names <- c()
pwpriv <- c()
for(pair in 1:length(combos[1,])) {#
    pwpriv_names <- c(pwpriv_names, paste("pwpriv_",combos[1,pair], combos[2,pair], collapse = "."), paste("pwpriv_", combos[2,pair], combos[1,pair]))#
    tmp_locMAF <- locMAF[,c(combos[1,pair], combos[2,pair])]#
    tmp_locMAF <- tmp_locMAF[rowSums(tmp_locMAF > 0),]#
    #Sites that are polymorphic in pop 1, but not 2#
    pwpriv <- c(pwpriv, sum(tmp_locMAF[,1] > 0 & tmp_locMAF[,2] == 0))#
    #Sites that are polymorphic in pop 2, but not 1#
    pwpriv <- c(pwpriv, sum(tmp_locMAF[,2] > 0 & tmp_locMAF[,1] == 0))#
#
    rm(tmp_locMAF)#
}
pwpriv
locMAF
pops <- colnames(locMAF)
combos <- combn(pops,2)
pwpriv_names <- c()
pwpriv <- c()
pair <- 1
pwpriv_names <- c(pwpriv_names, paste("pwpriv_",combos[1,pair], combos[2,pair], collapse = "."), paste("pwpriv_", combos[2,pair], combos[1,pair]))
pwpriv_names
pwpriv_names <- c()
pwpriv <- c()
pwpriv_names <- c(pwpriv_names, paste0("pwpriv_",combos[1,pair],".",combos[2,pair]), paste0("pwpriv_", combos[2,pair],".",combos[1,pair]))
pwpriv_names
tmp_locMAF <- locMAF[,c(combos[1,pair], combos[2,pair])]
tmp_locMAF[1:10,]
tmp_locMAF <- tmp_locMAF[rowSums(tmp_locMAF > 0),]
tmp_locMAF[1:10,]
tmp_locMAF <- locMAF[,c(combos[1,pair], combos[2,pair])]
rowSums(tmp_locMAF)
sum(rowSums(tmp_locMAF) == 0)
dim(tmp_locMAF)
pwpriv_names <- c(pwpriv_names, paste0("pwpriv_",combos[1,pair],".",combos[2,pair]), paste0("pwpriv_", combos[2,pair],".",combos[1,pair]))
tmp_locMAF <- locMAF[,c(combos[1,pair], combos[2,pair])]
tmp_locMAF <- tmp_locMAF[rowSums(tmp_locMAF > 0),]
dim(tmp_locMAF)
pwpriv <- c(pwpriv, sum(tmp_locMAF[,1] > 0 & tmp_locMAF[,2] == 0))
pwpriv <- c(pwpriv, sum(tmp_locMAF[,2] > 0 & tmp_locMAF[,1] == 0))
pwpriv
tmp_locMAF[tmp_locMAF[,2] == 0,]
sum(locMAF == 1)
tmp_loc_MAF[,1] > 0
tmp_locMAF[,1] > 0
tmp_locMAF
N.LA
N.UNK
demes
parms
params
privateSNP
privateAlleles(df2gtypes(fscout, ploidy=2))
dim(privateAlleles(df2gtypes(fscout, ploidy=2)))
rowSums(locMAF) == 0
rowSums(locMAF == 0)
max(rowSums(locMAF == 0))
114+100+94+26+25+50
library(strataG)
fscRun
\\
readArp
fscReadArp
.fscFormatGenotypes
?demes
fscSettingsDemes
?fscSettingsDemes
?fscDeme
install.packages("Demerelate")
devtools::install_github("jehangiramjad/tslib")
Sys.unsetenv("GITHUB_PAT")
devtools::install_github("jehangiramjad/tslib")
devtools::install_github("thelinkan/tslib")
devtools::install_github("armstrtw/fts")
options(timeout=9999999)
devtools::install_github("armstrtw/fts")
1.09/0.62
0.62/1.09
1.09/0.59
50000*24
580036-1500
601431-1500
tmp <- read.table("AB1.thetas.idx.txt", header = TRUE)
10^-10.386044
exp(-10.386044)
head(tmp)
tmp <- read.table("AB1.thetas.idx.txt", header = TRUE)
names(tmp)
range(tmp$Pairwise)
length(which(tmp$Pairwise == "-Inf"))
tmp[which(tmp$Pairwise == "-Inf")[1],]
exp(-Inf)
10^-Inf
pwise <- 10^tmp$Pairwise
pwise[1:100]
mean(pwise)
pwise2 <- exp(tmp$Pairwise)
mean(pwise2)
range(pwise)
range(pwise2)
log(5.6)
log10(5.6)
-1500+622735
-1500+628742
50000*24
25000*24
20000*24
634-678
634-578
600/56
24*40000
-1500+654829
-1500+681720
-1500+684132
seq(16,100,16)
-1500+686171
-1500+700390
-1500+729099
Sys.unsetenv("GITHUB_PAT")
options(timeout = 99999999)
Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS=TRUE)
devtools::install_github('stranda/holoSimCell')
library(adegenet)
install.packages("adegenet")
library(adegenet)
library(rlang)
install.packages("rlang")
install.packages("adegenet")
devtools::install_github('stranda/holoSimCell')
library(holoSimCell)
?pophist2.cells
?getpophist2.cells
?testPophist
-1500+769061
-1500+782301
-1500+783101
-1500+794231
-1500+814483
100*100
500*500
-1500+868853
library(rmetasim)
showVignettes(rmetasim)
vignette(rmetasim)
vignette(package = "rmetasim")
-1500+881590
library(vegan)
?specpool
-1500+892542
-1500+907570
library(holoSimCell)
?make.gmap
parms <- drawParms(control = system.file("extdata/ashpaper","Ash_priors.csv",package="holoSimCell"))#
modchoice <- 1#
load(file=paste0(system.file(package="holoSimCell"),"/extdata/landscapes/",pollenPulls[[modchoice]]$file))#
refpops <- pollenPulls[[modchoice]]$refs#
avgCellsz <- mean(c(res(landscape$sumrast)))#
#
ph = getpophist2.cells(h = landscape$details$ncells, xdim = landscape$details$x.dim, ydim = landscape$details$y.dim,#
                       landscape=landscape,#
                       refs=refpops,  #set at cell 540 right now #
                       refsz=parms$ref_Ne,#
                       lambda=parms$lambda,#
                       mix=parms$mix,  #note how small.#
                       shortscale=parms$shortscale*avgCellsz,  # scale parameter of weibull with shape below#
                       shortshape=parms$shortshape, #weibull shape#
                       longmean=parms$longmean*avgCellsz,  # mean of normal with sd = longmean#
                       ysz=res(landscape$sumrast)[2], #height of cell in raster (same units as longmean and shortscale)#
                       xsz=res(landscape$sumrast)[1], #width of cell in raster#
                       K = parms$Ne) #maximum population size in a grid cell, scaled with hab_suit from landscape object#
#
gmap=make.gmap(ph$pophist,#
               xnum=2, #number of cells to aggregate in x-direction#
               ynum=2) #number of aggregate in the y-direction#
#
ph2 <- pophist.aggregate(ph,gmap=gmap)
?getpophist2.cells
?DoesGmapCombine
?doesGmapCombine
doesGmapCombine(gmap, landscape)
?pophist.aggregate
ph2 <- pophist.aggregate(ph,gmap=gmap)
dim(ph2$Nvecs)
dim(ph2$tmat)
ph2$struct
dim(ph2$hab_suit)
dim(ph2$popslst)
ph2$popslst
length(ph2$poslst)
length(ph2$popslst)
51*49
ph2$popslst[[1]]
dim(ph2$old_hab_suit)
ph2$old_hab_suit
names(ph2$old_hab_suit)
dim(ph2$old_hab_suit$hab_suit)
dim(ph2$old_tmat)
ph2$gmap
library(holoSimCell)
?make.gmap
?getpophist2.cells
?doesGmapCombine
?pophist.aggregate
?holoStats
setwd("~/Desktop/GitHub/holoSimCell")
devtools::document()
