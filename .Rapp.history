res
HStable <- data.frame(HSid = unique(res$ClusterIndex), n.ind = NA, n.pops = NA, details = NA)
FStable <- data.frame(FSid = unique(res$FSIndex), n.ind = NA, n.pops = NA, details = NA)
id <- 1
tmp <- HStable[HStable$HSid == id,]
HStable$n.ind[HStable$HSid == id] <- length(tmp[,1])
HStable$n.pops[HStable$HSid == id] <- length(unique(tmp$SubStream))
HStable
names(tmp)
tmp <- res[res$ClusterIndex == id,]
HStable$n.ind[HStable$HSid == id] <- length(tmp[,1])
HStable$n.pops[HStable$HSid == id] <- length(unique(tmp$SubStream))
HStable
HStable$details = paste(unique(tmp$SubStream), table(tmp$Substream))
HStable
HStable$details = paste(unique(tmp$SubStream), table(tmp$Substream), collapse = "-")
HStable$details[HStable$HSid == id] = paste(unique(tmp$SubStream), table(tmp$Substream), collapse = "-")
HStable
table(tmp$Substream)
tmp
table(tmp$SubStream)
HStable$details[HStable$HSid == id] = paste(colnames(tmptab), tmptab)
tmptab <- table(tmp$SubStream)
HStable$details[HStable$HSid == id] = paste(colnames(tmptab), tmptab)
tmptab <- table(tmp$SubStream)
HStable$details[HStable$HSid == id] = paste(names(tmptab), tmptab)
HStable
setwd("~/Desktop")
res <- read.csv("CKMR_allsites.csv", header = TRUE)
#Add a column for Full Sib Index, pasting together mother and father IDs
res$FSIndex <- paste0(res$FatherID, "x", res$MotherID)
#Build tables to fill with data
#One row per ClusterIndex or FSindex
HStable <- data.frame(HSid = unique(res$ClusterIndex), n.ind = NA, n.pops = NA, details = NA)
FStable <- data.frame(FSid = unique(res$FSIndex), n.ind = NA, n.pops = NA, details = NA)
#Loop for HS
for(id in HStable$HSid){#
    tmp <- res[res$ClusterIndex == id,]#
    HStable$n.ind[HStable$HSid == id] <- length(tmp[,1])#
    HStable$n.pops[HStable$HSid == id] <- length(unique(tmp$SubStream))#
    tmptab <- table(tmp$SubStream)#
    HStable$details[HStable$HSid == id] = paste(names(tmptab), tmptab)#
    rm(tmp)#
}
HStable
HStable <- data.frame(HSid = unique(res$ClusterIndex), n.ind = NA, n.pops = NA, details = NA)
FStable <- data.frame(FSid = unique(res$FSIndex), n.ind = NA, n.pops = NA, details = NA)
#Loop for HS
for(id in HStable$HSid){#
    tmp <- res[res$ClusterIndex == id,]#
    HStable$n.ind[HStable$HSid == id] <- length(tmp[,1])#
    HStable$n.pops[HStable$HSid == id] <- length(unique(tmp$SubStream))#
    tmptab <- table(tmp$SubStream)#
    HStable$details[HStable$HSid == id] = paste(names(tmptab), tmptab, collapse = "...")#
    rm(tmp)#
}
HStable
setwd("~/Desktop")
res <- read.csv("CKMR_allsites.csv", header = TRUE)
#Add a column for Full Sib Index, pasting together mother and father IDs
res$FSIndex <- paste0(res$FatherID, "x", res$MotherID)
#Colony clusters
#Build table to fill with data, one row per ClusterIndex
CCtable <- data.frame(CCid = unique(res$ClusterIndex), n.ind = NA, n.pops = NA, details = NA)
#Loop for CC
for(id in CCtable$CCid){#
    tmp <- res[res$ClusterIndex == id,]#
    CCtable$n.ind[CCtable$CCid == id] <- length(tmp[,1])#
    CCtable$n.pops[CCtable$CCid == id] <- length(unique(tmp$SubStream))#
    tmptab <- table(tmp$SubStream)#
    CCtable$details[CCtable$CCid == id] = paste(names(tmptab), tmptab, collapse = "_")#
    rm(tmp)#
}
#Look at the results
CCtable
#Write table to a file
write.csv(CCtable, "ColClusterSummary_allsites.csv", quote = FALSE, row.names = FALSE)
#Full-Sibs
#Build table to fill with data, one row per Full Sib Index
FStable <- data.frame(FSid = unique(res$FSIndex), n.ind = NA, n.pops = NA, details = NA)
#Loop for FS
for(id in FStable$FSid){#
    tmp <- FStable[FStable$FSid == id,]#
    FStable$n.ind[FStable$FSid == id] <- length(tmp[,1])#
    FStable$n.pops[FStable$FSid == id] <- length(unique(tmp$SubStream))#
    tmptab <- table(tmp$SubStream)#
    FStable$details[FStable$FSid == id] = paste(names(tmptab), tmptab, collapse = "_")#
    rm(tmp)#
}
#Look at the results
FStable
FStable <- data.frame(FSid = unique(res$FSIndex), n.ind = NA, n.pops = NA, details = NA)
#Loop for FS
for(id in FStable$FSid){#
    tmp <- res[res$FSid == id,]#
    FStable$n.ind[FStable$FSid == id] <- length(tmp[,1])#
    FStable$n.pops[FStable$FSid == id] <- length(unique(tmp$SubStream))#
    tmptab <- table(tmp$SubStream)#
    FStable$details[FStable$FSid == id] = paste(names(tmptab), tmptab, collapse = "_")#
    rm(tmp)#
}
FStable
res
FStable <- data.frame(FSid = unique(res$FSIndex), n.ind = NA, n.pops = NA, details = NA)
#Loop for FS
for(id in FStable$FSid){#
    tmp <- res[res$FSIndex == id,]#
    FStable$n.ind[FStable$FSid == id] <- length(tmp[,1])#
    FStable$n.pops[FStable$FSid == id] <- length(unique(tmp$SubStream))#
    tmptab <- table(tmp$SubStream)#
    FStable$details[FStable$FSid == id] = paste(names(tmptab), tmptab, collapse = "_")#
    rm(tmp)#
}
#Look at the results
FStable
setwd("~/Desktop")
res <- read.csv("CKMR_allsites.csv", header = TRUE)
#Add a column for Full Sib Index, pasting together mother and father IDs
res$FSIndex <- paste0(res$FatherID, "x", res$MotherID)
#Colony clusters
#Build table to fill with data, one row per ClusterIndex
CCtable <- data.frame(CCid = unique(res$ClusterIndex), n.ind = NA, n.pops = NA, details = NA)
#Loop for CC
for(id in CCtable$CCid){#
    tmp <- res[res$ClusterIndex == id,]#
    CCtable$n.ind[CCtable$CCid == id] <- length(tmp[,1])#
    CCtable$n.pops[CCtable$CCid == id] <- length(unique(tmp$SubStream))#
    tmptab <- table(tmp$SubStream)#
    CCtable$details[CCtable$CCid == id] = paste(names(tmptab), tmptab, collapse = "_")#
    rm(tmp)#
}
#Look at the results
CCtable
#Write table to a file
write.csv(CCtable, "ColClusterSummary_allsites.csv", quote = FALSE, row.names = FALSE)
#Full-Sibs
#Build table to fill with data, one row per Full Sib Index
FStable <- data.frame(FSid = unique(res$FSIndex), n.ind = NA, n.pops = NA, details = NA)
#Loop for FS
for(id in FStable$FSid){#
    tmp <- res[res$FSIndex == id,]#
    FStable$n.ind[FStable$FSid == id] <- length(tmp[,1])#
    FStable$n.pops[FStable$FSid == id] <- length(unique(tmp$SubStream))#
    tmptab <- table(tmp$SubStream)#
    FStable$details[FStable$FSid == id] = paste(names(tmptab), tmptab, collapse = "_")#
    rm(tmp)#
}
#Look at the results
FStable
#Write table to a file
write.csv(FStable, "FullSibSummary_allsites.csv", quote = FALSE, row.names = FALSE)
setwd("~/Desktop")
res <- read.csv("CKMR_allsites.csv", header = TRUE)
#Add a column for Full Sib Index, pasting together mother and father IDs
res$FSIndex <- paste0(res$FatherID, "x", res$MotherID)
#Colony clusters
#Build table to fill with data, one row per ClusterIndex
CCtable <- data.frame(CCid = unique(res$ClusterIndex), n.ind = NA, n.pops = NA, details = NA)
#Loop for CC
for(id in CCtable$CCid){#
    #Make a temporary object with only individuals from a single ClusterIndex (id in the loop)#
    tmp <- res[res$ClusterIndex == id,]#
    #How many individuals are in that cluster total?#
    CCtable$n.ind[CCtable$CCid == id] <- length(tmp[,1])#
    #How many populations are represented in that cluster?#
    CCtable$n.pops[CCtable$CCid == id] <- length(unique(tmp$SubStream))#
    #Make a table showing the number of individuals per stream#
    tmptab <- table(tmp$SubStream)#
    #Paste the output of tmptab together to show number of individuals per stream#
    CCtable$details[CCtable$CCid == id] = paste(names(tmptab), tmptab, collapse = "_")#
    rm(tmp, tmptab)#
}
#Look at the results
CCtable
#Write table to a file
write.csv(CCtable, "ColClusterSummary_allsites.csv", quote = FALSE, row.names = FALSE)
#Full-Sibs
#Build table to fill with data, one row per Full Sib Index
FStable <- data.frame(FSid = unique(res$FSIndex), n.ind = NA, n.pops = NA, details = NA)
#Loop for FS
for(id in FStable$FSid){#
    tmp <- res[res$FSIndex == id,]#
    FStable$n.ind[FStable$FSid == id] <- length(tmp[,1])#
    FStable$n.pops[FStable$FSid == id] <- length(unique(tmp$SubStream))#
    tmptab <- table(tmp$SubStream)#
    FStable$details[FStable$FSid == id] = paste(names(tmptab), tmptab, collapse = "_")#
    rm(tmp, tmptab)#
}
#Look at the results
FStable
#Write table to a file
write.csv(FStable, "FullSibSummary_allsites.csv", quote = FALSE, row.names = FALSE)
setwd("~/Desktop")
ss <- read.csv("ss100.csv", header = TRUE, nrow = 100000)
sum(apply(ss,2,is.numeric))
apply(ss,2,is.numeric)
ss[1:100,]
is.numeric(ss)
is.numeric(ss[1:100,])
class(ss[,1])
is.numeric(ss[,1])
is.numeric(ss[,2])
is.numeric(ss[,3])
is.numeric(ss[,4])
apply(ss,2,is.numeric)
is.numeric(ss[,1])
is.numeric(ss[,2])
is.numeric(ss[,1:2])
isnum <- c()#
for(x in 1:100){#
	isnum[x] <- is.numeric(ss[,x])#
}
isnum
which(isnum == FALSE)
ss[,76]
tmp <- read.csv("ss100.csv", header = TRUE, skip = 80000, nrow = 5000)
tmp
is.numeric(tmp[1,])
tmp[1,]
tmp <- read.csv("ss100.csv", header = FALSE, skip = 80000, nrow = 5000)
tmp[1,]
is.numeric(tmp[1,])
as.numeric(tmp[1,])
is.numeric(as.numeric(tmp[1,]))
is.numeric(as.numeric(tmp[3367,]))
is.numeric(as.numeric(tmp[3368,]))
tmp[3368,]
as.numeric(tmp[3368,])
tmp2 <- read.csv("ss200.csv", header = FALSE, skip = 555000, nrow = 1000)
tmp2
as.numeric(tmp2)
as.numeric(tmp2[545,])
as.numeric(tmp2[544,])
as.numeric(tmp2[543,])
as.numeric(tmp2[542,])
as.numeric(tmp2[540:545,])
grep("ENM",tmp2)
tmp2
tmp
as.numeric(tmp)
?as.numeric
apply(tmp, 1, as.numeric)
rowSums(is.na(apply(tmp, 1, as.numeric)))
tmp
dim(tmp)
tmp <- tmp[rowSums(is.na(apply(tmp[,c(28:length(tmp[1,]))], 1, as.numeric))) == 0,]
dim(tmp)
rowSums(is.na(apply(tmp,1,as.numeric)))
rowSums(is.na(apply(tmp,2,as.numeric)))
?apply
tmp[1,]
tmp
apply(tmp,1,as.numeric)
rowSums(is.na(apply(tmp,1,as.numeric)))
colSums(is.na(apply(tmp,1,as.numeric)))
tmp2 <- tmp[colSums(is.na(apply(tmp[,c(28:length(tmp[1,]))], 1, as.numeric))) == 0,]
dim(tmp2)
tmp2
dim(tmp)
ls()
rm(tmp2)
tmp <- read.csv("ss100.csv", header = FALSE, skip = 80000, nrow = 5000)
tmp[3368,]
?rowSums
tmp2 <- tmp[colSums(is.na(apply(tmp, 1, as.numeric))) == 0,]
dim(tmp2)
tmp2[3360:3370,76]
tmp[3360:3370,76]
tmp2 <- tmp[rowSums(is.na(apply(tmp, 1, as.numeric))) == 0,]
dim(tmp2)
rowSums(is.na(apply(tmp, 1, as.numeric)))
colSums(is.na(apply(tmp, 1, as.numeric)))
dat <- matrix(c(1:9), nrow = 3, byrow = TRUE)
dat
colSums(dat)
rowSums(dat)
rowSums(is.na(apply(tmp, 1, as.numeric)))
tmp_cs <- tmp[which(colSums(is.na(apply(tmp, 1, as.numeric))) == 0),]#
tmp_rs <- tmp[which(rowSums(is.na(apply(tmp, 1, as.numeric))) == 0),]
dim(tmp_cs)
dim(tmp_rs)
colSums(is.na(apply(tmp,1,as.numeric)))
colSums(is.na(apply(tmp[,1:2],1,as.numeric)))
colSums(is.na(apply(tmp[1:2,],1,as.numeric)))
colSums(dat)
dat
dim(apply(tmp,1,as.numeric))
apply(tmp,1,as.numeric)
dim(tmp)
?apply
tapply(tmp, as.numeric)
tapply(tmp, FUN=as.numeric)
tmp_cs <- tmp[which(colSums(is.na(t(apply(tmp, 1, as.numeric)))) == 0),]#
tmp_rs <- tmp[which(rowSums(is.na(t(apply(tmp, 1, as.numeric)))) == 0),]
dim(tmp_cs)
dim(tmp_rs)
tmp <- tmp[which(rowSums(is.na(t(apply(tmp[,c(28:length(tmp[1,]))], 1, as.numeric)))) == 0),]
dim(tmp)
500/6
83/6.23
library(holoSimCell)
enmScenarios
enmScenarios$enms
library(rgdal)
?CRS
493.8*2
987*0.58
library(bmixture)
?bmixt
226/365
100*0.62+50*0.38
4*0.81
6*0.81
3*0.81
3*2*1058+12*2*1058*1.03+12*2*1058*1.03*1.03
59440+29000+7000
setwd("GitHub/holoSimCell")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?distancePDF
devtools::document()
devtools::document()
?getpophist2.cells
?getpophist2.cells
devtools::document()
?getpophist2.cells
devtools::document()
?getpophist2.cells
