tmp_locMAF <- tmp_locMAF[rowSums(tmp_locMAF > 0),]
tmp_locMAF[1:10,]
tmp_locMAF <- locMAF[,c(combos[1,pair], combos[2,pair])]
rowSums(tmp_locMAF)
sum(rowSums(tmp_locMAF) == 0)
dim(tmp_locMAF)
pwpriv_names <- c(pwpriv_names, paste0("pwpriv_",combos[1,pair],".",combos[2,pair]), paste0("pwpriv_", combos[2,pair],".",combos[1,pair]))
tmp_locMAF <- locMAF[,c(combos[1,pair], combos[2,pair])]
tmp_locMAF <- tmp_locMAF[rowSums(tmp_locMAF > 0),]
dim(tmp_locMAF)
pwpriv <- c(pwpriv, sum(tmp_locMAF[,1] > 0 & tmp_locMAF[,2] == 0))
pwpriv <- c(pwpriv, sum(tmp_locMAF[,2] > 0 & tmp_locMAF[,1] == 0))
pwpriv
tmp_locMAF[tmp_locMAF[,2] == 0,]
sum(locMAF == 1)
tmp_loc_MAF[,1] > 0
tmp_locMAF[,1] > 0
tmp_locMAF
N.LA
N.UNK
demes
parms
params
privateSNP
privateAlleles(df2gtypes(fscout, ploidy=2))
dim(privateAlleles(df2gtypes(fscout, ploidy=2)))
rowSums(locMAF) == 0
rowSums(locMAF == 0)
max(rowSums(locMAF == 0))
114+100+94+26+25+50
library(strataG)
fscRun
\\
readArp
fscReadArp
.fscFormatGenotypes
?demes
fscSettingsDemes
?fscSettingsDemes
?fscDeme
install.packages("Demerelate")
devtools::install_github("jehangiramjad/tslib")
Sys.unsetenv("GITHUB_PAT")
devtools::install_github("jehangiramjad/tslib")
devtools::install_github("thelinkan/tslib")
devtools::install_github("armstrtw/fts")
options(timeout=9999999)
devtools::install_github("armstrtw/fts")
1.09/0.62
0.62/1.09
1.09/0.59
50000*24
580036-1500
601431-1500
tmp <- read.table("AB1.thetas.idx.txt", header = TRUE)
10^-10.386044
exp(-10.386044)
head(tmp)
tmp <- read.table("AB1.thetas.idx.txt", header = TRUE)
names(tmp)
range(tmp$Pairwise)
length(which(tmp$Pairwise == "-Inf"))
tmp[which(tmp$Pairwise == "-Inf")[1],]
exp(-Inf)
10^-Inf
pwise <- 10^tmp$Pairwise
pwise[1:100]
mean(pwise)
pwise2 <- exp(tmp$Pairwise)
mean(pwise2)
range(pwise)
range(pwise2)
log(5.6)
log10(5.6)
-1500+622735
-1500+628742
50000*24
25000*24
20000*24
634-678
634-578
600/56
24*40000
-1500+654829
-1500+681720
-1500+684132
seq(16,100,16)
-1500+686171
-1500+700390
-1500+729099
Sys.unsetenv("GITHUB_PAT")
options(timeout = 99999999)
Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS=TRUE)
devtools::install_github('stranda/holoSimCell')
library(adegenet)
install.packages("adegenet")
library(adegenet)
library(rlang)
install.packages("rlang")
install.packages("adegenet")
devtools::install_github('stranda/holoSimCell')
library(holoSimCell)
?pophist2.cells
?getpophist2.cells
?testPophist
-1500+769061
-1500+782301
-1500+783101
-1500+794231
-1500+814483
100*100
500*500
-1500+868853
library(rmetasim)
showVignettes(rmetasim)
vignette(rmetasim)
vignette(package = "rmetasim")
-1500+881590
library(vegan)
?specpool
-1500+892542
-1500+907570
library(holoSimCell)
?make.gmap
parms <- drawParms(control = system.file("extdata/ashpaper","Ash_priors.csv",package="holoSimCell"))#
modchoice <- 1#
load(file=paste0(system.file(package="holoSimCell"),"/extdata/landscapes/",pollenPulls[[modchoice]]$file))#
refpops <- pollenPulls[[modchoice]]$refs#
avgCellsz <- mean(c(res(landscape$sumrast)))#
#
ph = getpophist2.cells(h = landscape$details$ncells, xdim = landscape$details$x.dim, ydim = landscape$details$y.dim,#
                       landscape=landscape,#
                       refs=refpops,  #set at cell 540 right now #
                       refsz=parms$ref_Ne,#
                       lambda=parms$lambda,#
                       mix=parms$mix,  #note how small.#
                       shortscale=parms$shortscale*avgCellsz,  # scale parameter of weibull with shape below#
                       shortshape=parms$shortshape, #weibull shape#
                       longmean=parms$longmean*avgCellsz,  # mean of normal with sd = longmean#
                       ysz=res(landscape$sumrast)[2], #height of cell in raster (same units as longmean and shortscale)#
                       xsz=res(landscape$sumrast)[1], #width of cell in raster#
                       K = parms$Ne) #maximum population size in a grid cell, scaled with hab_suit from landscape object#
#
gmap=make.gmap(ph$pophist,#
               xnum=2, #number of cells to aggregate in x-direction#
               ynum=2) #number of aggregate in the y-direction#
#
ph2 <- pophist.aggregate(ph,gmap=gmap)
?getpophist2.cells
?DoesGmapCombine
?doesGmapCombine
doesGmapCombine(gmap, landscape)
?pophist.aggregate
ph2 <- pophist.aggregate(ph,gmap=gmap)
dim(ph2$Nvecs)
dim(ph2$tmat)
ph2$struct
dim(ph2$hab_suit)
dim(ph2$popslst)
ph2$popslst
length(ph2$poslst)
length(ph2$popslst)
51*49
ph2$popslst[[1]]
dim(ph2$old_hab_suit)
ph2$old_hab_suit
names(ph2$old_hab_suit)
dim(ph2$old_hab_suit$hab_suit)
dim(ph2$old_tmat)
ph2$gmap
library(holoSimCell)
?make.gmap
?getpophist2.cells
?doesGmapCombine
?pophist.aggregate
?holoStats
Sys.unsetenv("GITHUB_PAT")
options(timeout=9999999)
Sys.sentenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS=TRUE)
Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS=TRUE)
devtools::install_github('stranda/holoSimCell')
library(holoSimCell)
?runFSC_step_agg3
library(holoSimCell)#
parms <- drawParms(control = system.file("extdata/ashpaper","Ash_priors.csv",package="holoSimCell"))#
modchoice <- 1#
load(file=paste0(system.file(package="holoSimCell"),"/extdata/landscapes/",pollenPulls[[modchoice]]$file))#
refpops <- pollenPulls[[modchoice]]$refs#
avgCellsz <- mean(c(res(landscape$sumrast)))#
#
ph = getpophist2.cells(h = landscape$details$ncells, xdim = landscape$details$x.dim, ydim = landscape$details$y.dim,#
                       landscape=landscape,#
                       refs=refpops,   #
                       refsz=parms$ref_Ne,#
                       lambda=parms$lambda,#
                       mix=parms$mix,  #
                       shortscale=parms$shortscale*avgCellsz,  #
                       shortshape=parms$shortshape, #
                       longmean=parms$longmean*avgCellsz,  #
                       ysz=res(landscape$sumrast)[2], #
                       xsz=res(landscape$sumrast)[1], #
                       K = parms$Ne) #
#
gmap=make.gmap(ph$pophist,#
               xnum=2, #number of cells to aggregate in x-direction#
               ynum=2) #number of aggregate in the y-direction#
#
ph2 <- pophist.aggregate(ph,gmap=gmap)#
#
loc_parms <- data.frame(marker = "snp",#
                        nloci = parms$nloci,           #
                        seq_length = parms$seq_length,#
                        mu = parms$mu)#
preLGMparms <- data.frame(preLGM_t = parms$preLGM_t/parms$G,   #
                          preLGM_Ne = parms$preLGM_Ne,#
                         ref_Ne = parms$ref_Ne)#
#
out <- runFSC_step_agg3(ph = ph2,#
                        l = landscape,#
                        sample_n = 14,#
                        preLGMparms = preLGMparms,#
                        label = "test",#
                        delete_files = TRUE,#
                        num_cores = 1,#
                        exec = "fsc26",#
                        loc_parms = loc_parms,#
                        found_Ne = parms$found_Ne,#
                        gmap = gmap,#
                        MAF = 0.01,#
                        maxloc = 50000)
out
-1500+920480
251958-13
-1500+939581
938081+251945+134072
134071+251945
1.2e6*0.01
1.2e6*0.001
1.2e6*0.005
1.2e6*0.05
1.2e6*0.01
1.2e6*0.005
1.2e6*0.001
remotes::install_github("lter/lterdatasampler")#
library(lterdatasampler)#
library(tidyverse)#
lterdatasampler::knz_bison %>%#
  filter(rec_year == 1994 | rec_year == 1998) %>%#
  add_count(animal_code) %>%#
  filter(n == 2) %>%#
  ggplot(aes(x = rec_year,#
             y = animal_weight,#
             group = animal_code#
             )) +#
  geom_line() +#
  geom_point() +#
  ylab("Animal weight") +#
  xlab("Year") +#
  theme_classic(base_size = 18) +#
  theme(legend.position = "none") +#
  NULL
Sys.unsetenv("GITHUB_PAT")
remotes::install_github("lter/lterdatasampler")#
library(lterdatasampler)#
library(tidyverse)#
lterdatasampler::knz_bison %>%#
  filter(rec_year == 1994 | rec_year == 1998) %>%#
  add_count(animal_code) %>%#
  filter(n == 2) %>%#
  ggplot(aes(x = rec_year,#
             y = animal_weight,#
             group = animal_code#
             )) +#
  geom_line() +#
  geom_point() +#
  ylab("Animal weight") +#
  xlab("Year") +#
  theme_classic(base_size = 18) +#
  theme(legend.position = "none") +#
  NULL
install.packages("credentials")
library(credentials)
set_github_pat(force_new = TRUE)
remotes::install_github("lter/lterdatasampler")
install.packages("gitcreds")
gitcreds::gitcreds_set()
remotes::install_github("lter/lterdatasampler")
usethis::edit_r_environ()
remotes::install_github("lter/lterdatasampler")
citation(package = "mclust")
citation(package = "bmixture")
citation(package = "bayesmix")
library(strataG)
?fscRun
?fscReadArp
Fsttest <- c(0.001, 0.25, NA, 0.3)
min(Fsttest)
max(Fsttest)
Fsttest <- c(0.001, 0.25, "temp", 0.3)
max(Fsttest)
min(Fsttest)
max(as.numeric(Fsttest))
max(as.numeric(Fsttest), na.rm = TRUE)
Fsttest <- matrix(data = runif(81), nrow= 9, ncol = 9)
Fsttest
Fsttest[3,3] <- "jojo"
Fsttest
Fstrowmax <- apply(Fsttest,1,FUN=function(x){max(as.numeric(x), na.rm = TRUE)})
Fstrowmin <- apply(Fsttest,1,FUN=function(x){min(as.numeric(x), na.rm = TRUE)})
Fstrowmax
Fstrowmin
is.numeric(Fsttest)
Fstrowtext <- apply(Fsttest, 1, FUN=function(x){sum(!is.numeric(x))})
Fstrowtext
is.numeric(Fsttest)
is.numeric(Fsttest[1,])
is.numeric(as.numeric(Fsttest[1,]))
is.numeric(as.numeric(Fsttest[3,]))
is.na(as.numeric(Fsttest[3,]))
Fstrowtext <- apply(Fsttest, 1, FUN=function(x){sum(is.na(as.numeric(x)))})
Fstrowtext
remrows <- which(Fstrowtext > 0)
Fstrowtext <- apply(Fsttest, 1, FUN=function(x){sum(is.na(as.numeric(x)))})
Fstrowmax <- apply(Fsttest,1,FUN=function(x){max(as.numeric(x), na.rm = TRUE)})
Fstrowmin <- apply(Fsttest,1,FUN=function(x){min(as.numeric(x), na.rm = TRUE)})
remrows <- which(Fstrowtext > 0)
remrows <- c(remrows, which(Fstrowmax > 1)
remrows <- c(remrows, which(Fstrowmin < 0))
print(paste("There are",length(remrows),"rows to remove"))
remrows
?install.packages()
library(holoSimCell)
?makePopdf
parms <- drawParms(control = system.file("extdata/ashpaper","Ash_priors.csv",package="holoSimCell"))#
modchoice <- 1#
load(file=paste0(system.file(package="holoSimCell"),"/extdata/landscapes/",pollenPulls[[modchoice]]$file))#
refpops <- pollenPulls[[modchoice]]$refs#
avgCellsz <- mean(c(res(landscape$sumrast)))#
#
ph = getpophist2.cells(h = landscape$details$ncells, xdim = landscape$details$x.dim, ydim = landscape$details$y.dim,#
                       landscape=landscape,#
                       refs=refpops,   #
                       refsz=parms$ref_Ne,#
                       lambda=parms$lambda,#
                       mix=parms$mix,  #
                       shortscale=parms$shortscale*avgCellsz,  #
                       shortshape=parms$shortshape, #
                       longmean=parms$longmean*avgCellsz,  #
                       ysz=res(landscape$sumrast)[2], #
                       xsz=res(landscape$sumrast)[1], #
                       K = parms$Ne) #
#
gmap=make.gmap(ph$pophist,#
               xnum=2, #number of cells to aggregate in x-direction#
               ynum=2) #number of aggregate in the y-direction#
#
ph2 <- pophist.aggregate(ph,gmap=gmap)#
#
loc_parms <- data.frame(marker = "snp",#
                        nloci = parms$nloci,           #
                        seq_length = parms$seq_length,#
                        mu = parms$mu)#
preLGMparms <- data.frame(preLGM_t = parms$preLGM_t/parms$G,   #
                          preLGM_Ne = parms$preLGM_Ne,#
                         ref_Ne = parms$ref_Ne)#
#
out <- runFSC_step_agg3(ph = ph2,#
                        l = landscape,#
                        sample_n = 14,#
                        preLGMparms = preLGMparms,#
                        label = "test",#
                        delete_files = TRUE,#
                        num_cores = 1,#
                        exec = "fsc26",#
                        loc_parms = loc_parms,#
                        found_Ne = parms$found_Ne,#
                        gmap = gmap,#
                        MAF = 0.01,#
                        maxloc = 50000)#
popDF <- makePopdf(landscape,"cell")
popDF
?runFSC_step_agg3
parms <- drawParms(control = system.file("extdata/ashpaper","Ash_priors.csv",package="holoSimCell"))#
modchoice <- 1#
load(file=paste0(system.file(package="holoSimCell"),"/extdata/landscapes/",pollenPulls[[modchoice]]$file))#
refpops <- pollenPulls[[modchoice]]$refs#
avgCellsz <- mean(c(res(landscape$sumrast)))#
#
ph = getpophist2.cells(h = landscape$details$ncells, xdim = landscape$details$x.dim, ydim = landscape$details$y.dim,#
                       landscape=landscape,#
                       refs=refpops,   #
                       refsz=parms$ref_Ne,#
                       lambda=parms$lambda,#
                       mix=parms$mix,  #
                       shortscale=parms$shortscale*avgCellsz,  #
                       shortshape=parms$shortshape, #
                       longmean=parms$longmean*avgCellsz,  #
                       ysz=res(landscape$sumrast)[2], #
                       xsz=res(landscape$sumrast)[1], #
                       K = parms$Ne) #
#
gmap=make.gmap(ph$pophist,#
               xnum=2, #number of cells to aggregate in x-direction#
               ynum=2) #number of aggregate in the y-direction#
#
ph2 <- pophist.aggregate(ph,gmap=gmap)#
#
loc_parms <- data.frame(marker = "snp",#
                        nloci = parms$nloci,           #
                        seq_length = parms$seq_length,#
                        mu = parms$mu)#
preLGMparms <- data.frame(preLGM_t = parms$preLGM_t/parms$G,   #
                          preLGM_Ne = parms$preLGM_Ne,#
                         ref_Ne = parms$ref_Ne)#
#
out <- runFSC_step_agg3(ph = ph2,#
                        l = landscape,#
                        sample_n = 14,#
                        preLGMparms = preLGMparms,#
                        label = "test",#
                        delete_files = TRUE,#
                        num_cores = 1,#
                        exec = "fsc26",#
                        loc_parms = loc_parms,#
                        found_Ne = parms$found_Ne,#
                        gmap = gmap,#
                        MAF = 0.01,#
                        maxloc = 50000)
class(loc_parms)
loc_parms
popDF
?makePopdf
?runFSC_step_agg3
gmap=make.gmap(ph$pophist,#
               xnum=1, #number of cells to aggregate in x-direction#
               ynum=1) #number of aggregate in the y-direction
gmap
ph2 <- pophist.aggregate(ph,gmap=gmap)
loc_parms <- data.frame(marker = "snp",#
                        nloci = parms$nloci,           #
                        seq_length = parms$seq_length,#
                        mu = parms$mu)#
preLGMparms <- data.frame(preLGM_t = parms$preLGM_t/parms$G,   #
                          preLGM_Ne = parms$preLGM_Ne,#
                         ref_Ne = parms$ref_Ne)#
#
out <- runFSC_step_agg3(ph = ph2,#
                        l = landscape,#
                        sample_n = 14,#
                        preLGMparms = preLGMparms,#
                        label = "test",#
                        delete_files = TRUE,#
                        num_cores = 1,#
                        exec = "fsc26",#
                        loc_parms = loc_parms,#
                        found_Ne = parms$found_Ne,#
                        gmap = gmap,#
                        MAF = 0.01,#
                        maxloc = 50000)
ph2$coalhist
ls()
out[1:10,1:10]
?holoStats
setwd("~/Desktop/GitHub/holoSimCell")
devtools::document()
?runFSC_step_agg3
